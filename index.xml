<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>twiddling bits</title><link>https://twiddlingbits.net/</link><description>Recent content on twiddling bits</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://twiddlingbits.net/index.xml" rel="self" type="application/rss+xml"/><item><title>luarocket, or vendoring Lua rocks</title><link>https://twiddlingbits.net/luarocket-or-vendoring-lua-rocks/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://twiddlingbits.net/luarocket-or-vendoring-lua-rocks/</guid><description>The Lua programming language, like many others, employs a purpose-built package manager to download and install its ecosystem of libraries. This tool, LuaRocks, has some notable features:
downloads/installs packages to user-specific or system-wide locations configurable dependency resolution builds locally define rocks (Lua modules packaged by LuaRocks) queries information about the active LuaRocks configuration In these ways, LuaRocks is functionally similar to the package managers of other dynamic languages such as pip for Python and npm for JavaScript.</description></item><item><title>From Pod to man</title><link>https://twiddlingbits.net/from-pod-to-man/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>https://twiddlingbits.net/from-pod-to-man/</guid><description>While developing many of my projects I&amp;rsquo;ve found myself faced with the timeless question: to document or not to document? My goal is to provide man pages for any project used from the command-line or designed to be integrated into a larger Linux ecosystem. And so, at the onset of my open-source journey, I stood at a crossroad: learn the unwieldy troff format of man pages or set up a process to build them from an alternative markup format.</description></item><item><title>Debouncing with a custom GSource</title><link>https://twiddlingbits.net/debouncing-with-a-custom-gsource/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>https://twiddlingbits.net/debouncing-with-a-custom-gsource/</guid><description>While developing sessiond, a session manager written in C with GLib, I was presented with an ideal use case for debouncing: postponing the execution of code that would otherwise run too frequently based on the influx of external events. sessiond is responsible for monitoring X11 input events, which are processed in the GLib event loop using a custom GSource. Debouncing avoids unnecessarily handling every event, especially mouse input events which are generated constantly while the mouse pointer moves.</description></item><item><title>Introducing sessiond</title><link>https://twiddlingbits.net/introducing-sessiond/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://twiddlingbits.net/introducing-sessiond/</guid><description>When I began using Linux on the desktop in ~2012, I experimented with the prevalent desktop environments (Gnome, KDE, etc.), but was quickly drawn into the realm of tiling window managers by their promise of increased productivity and customization. While I believe these promises were fulfilled, tiling window managers were not without a significant shortcoming: they are solely window managers, lacking the integrated suite of software and applications that put the environment in desktop environments.</description></item><item><title>About</title><link>https://twiddlingbits.net/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://twiddlingbits.net/about/</guid><description>I&amp;rsquo;m James Reed, a metamodern homo sapien and open source software developer. These are some of my projects:
sessiond A standalone X session manager tech: c python X11 GLib D-Bus wm-launch Tool to launch X11 clients with unique IDs tech: c go X11 LD_PRELOAD dovetail An opinionated tiling window manager tech: lua X11 D-Bus iniq A simple INI file reader for the command line tech: c passless A declarative password manager based on lesspass tech: bash toolboxcutter Script to automate use of toolbox using per-project Dockerfiles tech: bash toolbox podman nicety A process priority management daemon for Linux tech: go lifelight Game of Life for Raspberry Pi with LED matrix display tech: go tidepool A digital evolution system and library tech: go hugo-theme-readme This very blog theme tech: html css Check out my GitHub profile to see what I&amp;rsquo;m currently working on, or send me an email with any questions or comments.</description></item></channel></rss>